[
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "查找库存为零的所有商品的名称和分类信息",
        "output": "SELECT product_name, category FROM products WHERE current_stock = 0;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);",
        "input": "找出所有2023年发生的销售记录，包括产品ID、数量和销售日期",
        "output": "SELECT product_id, quantity, transaction_date FROM transactions WHERE transaction_type = 'sale' AND YEAR(transaction_date) = 2023;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "找出单价在500到1000之间的商品的名称和类别，按单价升序排序",
        "output": "SELECT product_name, category FROM products WHERE unit_price BETWEEN 500 AND 1000 ORDER BY unit_price ASC;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "查找销售数量超过50的产品名称和总销售额，按总销售额降序排序",
        "output": "SELECT p.product_name, SUM(t.quantity * t.unit_price) AS total_sales FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.product_name HAVING SUM(t.quantity) > 50 ORDER BY total_sales DESC;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "找出每个分类中库存量最高的商品的名称和库存量",
        "output": "WITH CategoryStock AS (\n    SELECT category, product_name, current_stock, ROW_NUMBER() OVER (PARTITION BY category ORDER BY current_stock DESC) AS rank\n    FROM products\n)\nSELECT product_name, category, current_stock\nFROM CategoryStock\nWHERE rank = 1;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);",
        "input": "统计每月的总销售额",
        "output": "SELECT DATE_FORMAT(transaction_date, '%Y-%m') AS month, SUM(quantity * unit_price) AS total_sales FROM transactions WHERE transaction_type = 'sale' GROUP BY DATE_FORMAT(transaction_date, '%Y-%m') ORDER BY month;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "列出所有库存少于10的商品名称和类别，按库存量升序排序",
        "output": "SELECT product_name, category FROM products WHERE current_stock < 10 ORDER BY current_stock ASC;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);",
        "input": "找出所有在2024年进行过交易的商品ID以及总交易量",
        "output": "SELECT product_id, SUM(quantity) AS total_quantity FROM transactions WHERE YEAR(transaction_date) = 2024 GROUP BY product_id;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);",
        "input": "列出每个分类的商品总库存量",
        "output": "SELECT category, SUM(current_stock) AS total_stock FROM products GROUP BY category;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);",
        "input": "找出过去30天内所有销售记录的交易ID、产品ID和数量",
        "output": "SELECT transaction_id, product_id, quantity FROM transactions WHERE transaction_type = 'sale' AND transaction_date >= CURDATE() - INTERVAL 30 DAY;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "列出当前库存不足50的所有产品的名称和类别，按库存升序排列。",
        "output": "SELECT product_name, category\nFROM products\nWHERE current_stock < 50\nORDER BY current_stock ASC;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "统计过去一个月内所有销售的总收入。",
        "output": "SELECT SUM(quantity * unit_price) AS total_revenue\nFROM transactions\nWHERE transaction_type = 'sale' AND transaction_date >= DATE('now', '-1 month');"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "找出销量最高的五种产品的名称及其对应的销量。",
        "output": "SELECT p.product_name, SUM(t.quantity) AS total_sales\nFROM products p\nJOIN transactions t ON p.product_id = t.product_id\nWHERE t.transaction_type = 'sale'\nGROUP BY p.product_name\nORDER BY total_sales DESC\nLIMIT 5;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "列出每种产品在每月的销售总收入，按月份和产品名称排序。",
        "output": "SELECT p.product_name, strftime('%Y-%m', t.transaction_date) AS month, SUM(t.quantity * t.unit_price) AS monthly_revenue\nFROM products p\nJOIN transactions t ON p.product_id = t.product_id\nWHERE t.transaction_type = 'sale'\nGROUP BY p.product_name, month\nORDER BY month, p.product_name;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "找出库存量低于其平均销量的所有产品名称和类别。",
        "output": "WITH avg_sales AS (\n    SELECT t.product_id, AVG(t.quantity) AS avg_quantity\n    FROM transactions t\n    WHERE t.transaction_type = 'sale'\n    GROUP BY t.product_id\n)\nSELECT p.product_name, p.category\nFROM products p\nJOIN avg_sales a ON p.product_id = a.product_id\nWHERE p.current_stock < a.avg_quantity;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "查询过去7天内完成的每种类型交易的总数量，按交易类型排序。",
        "output": "SELECT transaction_type, SUM(quantity) AS total_quantity\nFROM transactions\nWHERE transaction_date >= DATE('now', '-7 days')\nGROUP BY transaction_type\nORDER BY transaction_type;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "列出每种类别中单价最高的产品的名称、类别和单价。",
        "output": "SELECT category, product_name, unit_price\nFROM products\nWHERE (category, unit_price) IN (\n    SELECT category, MAX(unit_price)\n    FROM products\n    GROUP BY category\n);"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "获取每种产品的总销售收入和销售数量，按收入从高到低排序。",
        "output": "SELECT p.product_name, SUM(t.quantity * t.unit_price) AS total_revenue, SUM(t.quantity) AS total_quantity\nFROM products p\nJOIN transactions t ON p.product_id = t.product_id\nWHERE t.transaction_type = 'sale'\nGROUP BY p.product_name\nORDER BY total_revenue DESC;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);",
        "input": "What is the highest unit price among all products?",
        "output": "SELECT MAX(unit_price) FROM products;"
    },
    {
        "instruction": "You are a text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "列出库存为0的所有产品名称及其类别。",
        "output": "SELECT product_name, category\nFROM products\nWHERE current_stock = 0;"
    },
    {
        "instruction": "You are a text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "计算2023年每月的总销售数量。",
        "output": "SELECT strftime('%Y-%m', transaction_date) AS month, SUM(quantity) AS total_sales\nFROM transactions\nWHERE transaction_type = 'sale' AND strftime('%Y', transaction_date) = '2023'\nGROUP BY month\nORDER BY month;"
    },
    {
        "instruction": "You are a text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "找出单价最高的三个产品的名称、类别和单价。",
        "output": "SELECT product_name, category, unit_price\nFROM products\nORDER BY unit_price DESC\nLIMIT 3;"
    },
    {
        "instruction": "You are a text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "列出所有在2024年1月发生销售的产品名称及其销售数量。",
        "output": "SELECT p.product_name, SUM(t.quantity) AS total_sold\nFROM products p\nJOIN transactions t ON p.product_id = t.product_id\nWHERE t.transaction_type = 'sale' AND strftime('%Y-%m', t.transaction_date) = '2024-01'\nGROUP BY p.product_name\nORDER BY total_sold DESC;"
    },
    {
        "instruction": "You are a text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "按类别统计每种产品的平均单价。",
        "output": "SELECT category, AVG(unit_price) AS average_price\nFROM products\nGROUP BY category\nORDER BY average_price DESC;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "列出当前库存少于50的所有商品的名称和类别，按库存升序排序",
        "output": "SELECT product_name, category\nFROM products\nWHERE current_stock < 50\nORDER BY current_stock ASC;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "找出每个类别的商品的平均单价",
        "output": "SELECT category, AVG(unit_price) AS average_price\nFROM products\nGROUP BY category;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "查询2024年内销售的所有商品的总收入（单位：元）",
        "output": "SELECT SUM(quantity * unit_price) AS total_revenue\nFROM transactions\nWHERE transaction_type = 'sale' AND transaction_date BETWEEN '2024-01-01' AND '2024-12-31';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "列出最贵的五种商品的名称、类别和单价",
        "output": "SELECT product_name, category, unit_price\nFROM products\nORDER BY unit_price DESC\nLIMIT 5;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "找出所有食品类商品的名称和过去一个月内的总销售额",
        "output": "SELECT p.product_name, SUM(t.quantity * t.unit_price) AS total_sales\nFROM products p\nJOIN transactions t ON p.product_id = t.product_id\nWHERE p.category = '食品' AND t.transaction_type = 'sale' AND t.transaction_date >= DATE('now', '-1 month')\nGROUP BY p.product_name;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "按月统计2023年每月的销售总额",
        "output": "SELECT strftime('%Y-%m', transaction_date) AS month, SUM(quantity * unit_price) AS total_sales\nFROM transactions\nWHERE transaction_type = 'sale' AND transaction_date BETWEEN '2023-01-01' AND '2023-12-31'\nGROUP BY month\nORDER BY month;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "查找库存少于50的所有商品名称及其类别，并按类别排序。",
        "output": "SELECT product_name, category\nFROM products\nWHERE current_stock < 50\nORDER BY category;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "列出每个类别中单价最高的商品名称及其单价。",
        "output": "WITH ranked_products AS (\n    SELECT product_name, category, unit_price,\n           RANK() OVER (PARTITION BY category ORDER BY unit_price DESC) AS rank\n    FROM products\n)\nSELECT product_name, category, unit_price\nFROM ranked_products\nWHERE rank = 1;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "统计过去30天内的总销售额（基于交易类型为'销售'的交易）。",
        "output": "SELECT SUM(quantity * unit_price) AS total_sales\nFROM transactions\nWHERE transaction_type = '销售'\n  AND transaction_date >= DATE('now', '-30 days');"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "获取每个商品的累计销售数量和总收入，并按总收入降序排列。",
        "output": "SELECT p.product_name,\n           SUM(t.quantity) AS total_quantity_sold,\n           SUM(t.quantity * t.unit_price) AS total_revenue\nFROM products p\nJOIN transactions t ON p.product_id = t.product_id\nWHERE t.transaction_type = '销售'\nGROUP BY p.product_name\nORDER BY total_revenue DESC;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "查找所有库存为零的商品的名称和类别。",
        "output": "SELECT product_name, category\nFROM products\nWHERE current_stock = 0;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "统计每个月的总交易数量和总交易额。",
        "output": "SELECT strftime('%Y-%m', transaction_date) AS month,\n           SUM(quantity) AS total_quantity,\n           SUM(quantity * unit_price) AS total_transaction_amount\nFROM transactions\nGROUP BY month\nORDER BY month;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "列出当前库存最多的前5种商品及其库存数量。",
        "output": "SELECT product_name, current_stock\nFROM products\nORDER BY current_stock DESC\nLIMIT 5;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "查找属于“电子产品”类别且单价在500到1000之间的商品。",
        "output": "SELECT product_name, unit_price\nFROM products\nWHERE category = '电子产品'\n  AND unit_price BETWEEN 500 AND 1000;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "获取过去一周内每种交易类型的总交易数量。",
        "output": "SELECT transaction_type, SUM(quantity) AS total_quantity\nFROM transactions\nWHERE transaction_date >= DATE('now', '-7 days')\nGROUP BY transaction_type;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "统计每个类别的商品总数。",
        "output": "SELECT category, COUNT(*) AS total_products\nFROM products\nGROUP BY category;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Which product has the lowest stock?",
        "output": "SELECT product_name FROM products ORDER BY current_stock ASC LIMIT 1;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Show me the name, category and unit price of products that have a unit price greater than 50 and are in stock with more than 10 units.",
        "output": "SELECT product_name, category, unit_price FROM products WHERE unit_price > 50 AND current_stock > 10;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE products(\n    product_id INTEGER PRIMARY KEY\n);",
        "input": "How many transactions are there in total?",
        "output": "SELECT COUNT(*) FROM transactions;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE products(\n    product_id INTEGER PRIMARY KEY\n);",
        "input": "What is the total revenue generated from all transactions?",
        "output": "SELECT SUM(quantity * unit_price) AS total_revenue FROM transactions WHERE transaction_type = 'sale';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "List all products that have never been sold.",
        "output": "SELECT product_name FROM products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM transactions WHERE transaction_type = 'sale');"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What was the total quantity of products sold on '2023-10-26'?",
        "output": "SELECT SUM(quantity) FROM transactions WHERE transaction_type = 'sale' AND transaction_date = '2023-10-26';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "What is the average unit price of products in the 'Electronics' category?",
        "output": "SELECT AVG(unit_price) FROM products WHERE category = 'Electronics';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the names of products that have a unit price higher than the average unit price of all transactions.",
        "output": "SELECT product_name FROM products WHERE unit_price > (SELECT AVG(unit_price) FROM transactions);"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE products(\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL\n);",
        "input": "What are the distinct transaction types?",
        "output": "SELECT DISTINCT transaction_type FROM transactions;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the total revenue for each product, including products that haven't been sold yet.",
        "output": "SELECT p.product_name, COALESCE(SUM(t.quantity * t.unit_price), 0) AS total_revenue FROM products p LEFT JOIN transactions t ON p.product_id = t.product_id AND t.transaction_type = 'sale' GROUP BY p.product_name;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What is the average quantity of products sold per transaction?",
        "output": "SELECT AVG(quantity) FROM transactions WHERE transaction_type = 'sale';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "For each product, find the date of its first sale.",
        "output": "SELECT p.product_name, MIN(t.transaction_date) AS first_sale_date FROM products p LEFT JOIN transactions t ON p.product_id = t.product_id AND t.transaction_type = 'sale' GROUP BY p.product_name;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What was the total revenue generated in October 2023?",
        "output": "SELECT SUM(quantity * unit_price) FROM transactions WHERE transaction_type = 'sale' AND transaction_date BETWEEN '2023-10-01' AND '2023-10-31';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "How many products have a unit price greater than the average unit price of all products in the 'Clothing' category?",
        "output": "SELECT COUNT(*) FROM products WHERE unit_price > (SELECT AVG(unit_price) FROM products WHERE category = 'Clothing');"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "List the top 5 most sold products along with their total sold quantities.",
        "output": "SELECT p.product_name, SUM(t.quantity) AS total_sold FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.product_name ORDER BY total_sold DESC LIMIT 5;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What was the average daily revenue for the month of November 2023?",
        "output": "SELECT AVG(daily_revenue) FROM (SELECT DATE(transaction_date) AS transaction_day, SUM(quantity * unit_price) AS daily_revenue FROM transactions WHERE transaction_type = 'sale' AND transaction_date BETWEEN '2023-11-01' AND '2023-11-30' GROUP BY transaction_day) AS daily_sales;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Find the categories where the average unit price is higher than the overall average unit price of all products.",
        "output": "SELECT category FROM products GROUP BY category HAVING AVG(unit_price) > (SELECT AVG(unit_price) FROM products);"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "For each transaction, show the transaction date, product name, quantity, and unit price.",
        "output": "SELECT t.transaction_date, p.product_name, t.quantity, t.unit_price FROM transactions t JOIN products p ON t.product_id = p.product_id;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What is the total number of transactions for each transaction type?",
        "output": "SELECT transaction_type, COUNT(*) AS total_transactions FROM transactions GROUP BY transaction_type;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "List all products with a current stock level below 5.",
        "output": "SELECT product_name, current_stock FROM products WHERE current_stock < 5;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the total revenue generated by each category for sales made in December 2023.",
        "output": "SELECT p.category, SUM(t.quantity * t.unit_price) AS total_revenue FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' AND t.transaction_date BETWEEN '2023-12-01' AND '2023-12-31' GROUP BY p.category;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Show the monthly sales trend (total quantity sold) for the year 2023.",
        "output": "SELECT strftime('%Y-%m', transaction_date) AS sales_month, SUM(quantity) AS total_quantity_sold FROM transactions WHERE transaction_type = 'sale' AND strftime('%Y', transaction_date) = '2023' GROUP BY sales_month ORDER BY sales_month;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Find the product with the highest unit price in each category.",
        "output": "SELECT category, product_name, unit_price FROM (SELECT category, product_name, unit_price, RANK() OVER (PARTITION BY category ORDER BY unit_price DESC) as rank_num FROM products) ranked_products WHERE rank_num = 1;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What is the total revenue generated from sales of products with a unit price greater than the average unit price of all products?",
        "output": "SELECT SUM(t.quantity * t.unit_price) AS total_revenue FROM transactions t JOIN products p ON t.product_id = p.product_id WHERE t.transaction_type = 'sale' AND p.unit_price > (SELECT AVG(unit_price) FROM products);"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the running total of revenue generated from sales, ordered by transaction date.",
        "output": "SELECT transaction_date, SUM(quantity * unit_price) OVER (ORDER BY transaction_date) AS running_total_revenue FROM transactions WHERE transaction_type = 'sale' ORDER BY transaction_date;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "For each category, find the product with the highest total sold quantity.",
        "output": "SELECT category, product_name, total_sold FROM (SELECT p.category, p.product_name, SUM(t.quantity) as total_sold, RANK() OVER (PARTITION BY p.category ORDER BY SUM(t.quantity) DESC) as rank_num FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.category, p.product_name) ranked_products WHERE rank_num = 1;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the average number of days between sales transactions.",
        "output": "SELECT AVG(days_between) AS average_days_between_sales FROM (SELECT JULIANDAY(transaction_date) - LAG(JULIANDAY(transaction_date), 1, JULIANDAY(transaction_date)) OVER (ORDER BY transaction_date) AS days_between FROM transactions WHERE transaction_type = 'sale') AS date_diffs;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "How many products are there in each category?",
        "output": "SELECT category, COUNT(*) AS number_of_products FROM products GROUP BY category;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE products(\n    product_id INTEGER PRIMARY KEY\n);",
        "input": "What is the total quantity of products sold in all transactions?",
        "output": "SELECT SUM(quantity) FROM transactions WHERE transaction_type = 'sale';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "List all products that have a unit price between 10 and 50 dollars, inclusive.",
        "output": "SELECT product_name FROM products WHERE unit_price BETWEEN 10 AND 50;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE products (\n product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL\n);",
        "input": "Find all transactions that occurred on '2023-11-15'.",
        "output": "SELECT * FROM transactions WHERE transaction_date = '2023-11-15';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What is the average unit price of all transactions?",
        "output": "SELECT AVG(unit_price) FROM transactions;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Which category has the lowest average unit price?",
        "output": "SELECT category FROM products GROUP BY category ORDER BY AVG(unit_price) ASC LIMIT 1;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the total revenue generated by sales on each day.",
        "output": "SELECT DATE(transaction_date) AS transaction_day, SUM(quantity * unit_price) AS daily_revenue FROM transactions WHERE transaction_type = 'sale' GROUP BY transaction_day;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "List the dates of all transactions, ordered from most recent to oldest.",
        "output": "SELECT transaction_date FROM transactions ORDER BY transaction_date DESC;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the total quantity sold for each product, ordered by product name.",
        "output": "SELECT p.product_name, SUM(t.quantity) AS total_quantity_sold FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.product_name ORDER BY p.product_name;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "What are the names and categories of the top 5 most expensive products?",
        "output": "SELECT product_name, category, unit_price FROM products ORDER BY unit_price DESC LIMIT 5;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Find the total revenue generated by each product in the 'Electronics' category.",
        "output": "SELECT p.product_name, SUM(t.quantity * t.unit_price) AS total_revenue FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' AND p.category = 'Electronics' GROUP BY p.product_name;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What is the total revenue generated from sales each month in 2023?",
        "output": "SELECT strftime('%Y-%m', transaction_date) AS sales_month, SUM(quantity * unit_price) AS monthly_revenue FROM transactions WHERE transaction_type = 'sale' AND strftime('%Y', transaction_date) = '2023' GROUP BY sales_month;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "List the products that have a unit price higher than the average unit price of products in their respective category.",
        "output": "SELECT product_name, category, unit_price FROM products p1 WHERE unit_price > (SELECT AVG(unit_price) FROM products p2 WHERE p1.category = p2.category);"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the average daily revenue from sales.",
        "output": "SELECT AVG(daily_revenue) FROM (SELECT DATE(transaction_date) AS transaction_day, SUM(quantity * unit_price) AS daily_revenue FROM transactions WHERE transaction_type = 'sale' GROUP BY transaction_day) AS daily_sales;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the names of products that have been sold on more than 5 distinct dates.",
        "output": "SELECT p.product_name FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.product_name HAVING COUNT(DISTINCT DATE(t.transaction_date)) > 5;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Which categories have an average product unit price greater than 75?",
        "output": "SELECT category FROM products GROUP BY category HAVING AVG(unit_price) > 75;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "List all sale transactions along with product names and categories.",
        "output": "SELECT t.transaction_id, p.product_name, p.category, t.quantity, t.unit_price, t.transaction_date FROM transactions t JOIN products p ON t.product_id = p.product_id WHERE t.transaction_type = 'sale';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the total revenue for each month of 2023, showing the month and the corresponding revenue.",
        "output": "SELECT strftime('%Y-%m', transaction_date) AS sales_month, SUM(quantity * unit_price) AS total_revenue FROM transactions WHERE transaction_type = 'sale' AND strftime('%Y', transaction_date) = '2023' GROUP BY sales_month ORDER BY sales_month;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Find the product with the lowest unit price in the 'Books' category.",
        "output": "SELECT product_name, unit_price FROM products WHERE category = 'Books' ORDER BY unit_price ASC LIMIT 1;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Show the number of sales transactions for each product.",
        "output": "SELECT p.product_name, COUNT(t.transaction_id) AS number_of_sales FROM products p LEFT JOIN transactions t ON p.product_id = t.product_id AND t.transaction_type = 'sale' GROUP BY p.product_name;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "List the products that have a current stock greater than 100 and a unit price less than 50.",
        "output": "SELECT product_name FROM products WHERE current_stock > 100 AND unit_price < 50;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the average quantity sold per transaction for the 'sale' transaction type.",
        "output": "SELECT AVG(quantity) FROM transactions WHERE transaction_type = 'sale';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What are the dates of the first and last transactions in the database?",
        "output": "SELECT MIN(transaction_date) AS first_transaction, MAX(transaction_date) AS last_transaction FROM transactions;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the total quantity sold for each category on '2023-10-26'.",
        "output": "SELECT p.category, SUM(t.quantity) AS total_quantity_sold FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' AND t.transaction_date = '2023-10-26' GROUP BY p.category;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Which product has the highest total stock across all categories?",
        "output": "SELECT product_name FROM products ORDER BY current_stock DESC LIMIT 1;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "List the products that have never had a 'return' transaction.",
        "output": "SELECT product_name FROM products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM transactions WHERE transaction_type = 'return');"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the monthly average revenue from sales transactions for the year 2023.",
        "output": "SELECT AVG(monthly_revenue) FROM (SELECT strftime('%Y-%m', transaction_date) AS sales_month, SUM(quantity * unit_price) AS monthly_revenue FROM transactions WHERE transaction_type = 'sale' AND strftime('%Y', transaction_date) = '2023' GROUP BY sales_month) AS monthly_sales;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "List all categories along with the number of products in each category that have a unit price greater than 50.",
        "output": "SELECT category, COUNT(product_id) FROM products WHERE unit_price > 50 GROUP BY category;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the names of products that have been involved in both 'sale' and 'return' transactions.",
        "output": "SELECT DISTINCT p.product_name FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type IN ('sale', 'return') GROUP BY p.product_name HAVING COUNT(DISTINCT t.transaction_type) = 2;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the total revenue generated from sales transactions for each day of the week (e.g., Monday, Tuesday, etc.).",
        "output": "SELECT strftime('%w', transaction_date) AS day_of_week, SUM(quantity * unit_price) AS total_revenue FROM transactions WHERE transaction_type = 'sale' GROUP BY day_of_week ORDER BY day_of_week;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the top 3 categories with the highest average transaction value (quantity * unit_price) for sales.",
        "output": "SELECT p.category, AVG(t.quantity * t.unit_price) AS average_transaction_value FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.category ORDER BY average_transaction_value DESC LIMIT 3;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "What is the total number of products in the 'Electronics' category that have a current stock less than 10?",
        "output": "SELECT COUNT(*) FROM products WHERE category = 'Electronics' AND current_stock < 10;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "List all sales transactions that occurred in the last quarter of 2023 (October 1st to December 31st).",
        "output": "SELECT * FROM transactions WHERE transaction_type = 'sale' AND transaction_date BETWEEN '2023-10-01' AND '2023-12-31';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the average unit price of products for each category, excluding products that have never been sold.",
        "output": "SELECT p.category, AVG(p.unit_price) AS average_unit_price FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.category;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the names of products that have a higher unit price than all products in the 'Books' category.",
        "output": "SELECT product_name FROM products WHERE unit_price > (SELECT MAX(unit_price) FROM products WHERE category = 'Books');"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Determine the month with the highest total revenue from sales in 2023.",
        "output": "SELECT strftime('%Y-%m', transaction_date) AS sales_month, SUM(quantity * unit_price) AS total_revenue FROM transactions WHERE transaction_type = 'sale' AND strftime('%Y', transaction_date) = '2023' GROUP BY sales_month ORDER BY total_revenue DESC LIMIT 1;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "List the products that have a current stock level lower than the average current stock level across all products.",
        "output": "SELECT product_name FROM products WHERE current_stock < (SELECT AVG(current_stock) FROM products);"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the total revenue generated from sales of products that have a unit price greater than the average unit price of all products within their respective category.",
        "output": "SELECT SUM(t.quantity * t.unit_price) AS total_revenue FROM transactions t JOIN products p ON t.product_id = p.product_id WHERE t.transaction_type = 'sale' AND p.unit_price > (SELECT AVG(unit_price) FROM products p2 WHERE p2.category = p.category);"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the year-over-year growth rate in total revenue from sales, comparing each year to the previous year.",
        "output": "SELECT strftime('%Y', transaction_date) AS sales_year, SUM(quantity * unit_price) AS total_revenue, LAG(SUM(quantity * unit_price), 1, 0) OVER (ORDER BY strftime('%Y', transaction_date)) AS previous_year_revenue, (SUM(quantity * unit_price) - LAG(SUM(quantity * unit_price), 1, SUM(quantity * unit_price)) OVER (ORDER BY strftime('%Y', transaction_date))) * 100.0 / LAG(SUM(quantity * unit_price), 1, SUM(quantity * unit_price)) OVER (ORDER BY strftime('%Y', transaction_date)) AS yoy_growth_rate FROM transactions WHERE transaction_type = 'sale' GROUP BY sales_year ORDER BY sales_year;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "For each product, find the date of its most recent sale transaction.",
        "output": "SELECT p.product_name, MAX(t.transaction_date) AS most_recent_sale_date FROM products p LEFT JOIN transactions t ON p.product_id = t.product_id AND t.transaction_type = 'sale' GROUP BY p.product_name;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the total revenue generated from sales in each quarter of 2023 (Q1, Q2, Q3, Q4).",
        "output": "SELECT CASE WHEN strftime('%m', transaction_date) BETWEEN '01' AND '03' THEN 'Q1' WHEN strftime('%m', transaction_date) BETWEEN '04' AND '06' THEN 'Q2' WHEN strftime('%m', transaction_date) BETWEEN '07' AND '09' THEN 'Q3' WHEN strftime('%m', transaction_date) BETWEEN '10' AND '12' THEN 'Q4' END AS quarter, SUM(quantity * unit_price) AS total_revenue FROM transactions WHERE transaction_type = 'sale' AND strftime('%Y', transaction_date) = '2023' GROUP BY quarter;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the average number of days between consecutive sales transactions for each product.",
        "output": "SELECT p.product_name, AVG(days_between) AS average_days_between_sales FROM products p JOIN (SELECT product_id, JULIANDAY(transaction_date) - LAG(JULIANDAY(transaction_date), 1, JULIANDAY(transaction_date)) OVER (PARTITION BY product_id ORDER BY transaction_date) AS days_between FROM transactions WHERE transaction_type = 'sale') AS date_diffs ON p.product_id = date_diffs.product_id GROUP BY p.product_name;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Determine the percentage contribution of each product to the total revenue generated from sales.",
        "output": "SELECT p.product_name, SUM(t.quantity * t.unit_price) * 100.0 / (SELECT SUM(quantity * unit_price) FROM transactions WHERE transaction_type = 'sale') AS revenue_percentage FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.product_name;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the names of products that have had a 'return' transaction in the same month as a 'sale' transaction.",
        "output": "SELECT DISTINCT p.product_name FROM products p JOIN transactions t1 ON p.product_id = t1.product_id AND t1.transaction_type = 'return' JOIN transactions t2 ON p.product_id = t2.product_id AND t2.transaction_type = 'sale' WHERE strftime('%Y-%m', t1.transaction_date) = strftime('%Y-%m', t2.transaction_date);"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the cumulative sales revenue for each day, considering only sales transactions up to that day.",
        "output": "SELECT DATE(transaction_date) AS transaction_day, SUM(quantity * unit_price) OVER (ORDER BY DATE(transaction_date)) AS cumulative_revenue FROM transactions WHERE transaction_type = 'sale' ORDER BY transaction_day;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Identify the category with the highest average difference between the product unit price and the average transaction unit price for sales.",
        "output": "SELECT p.category, AVG(p.unit_price - t.unit_price) AS avg_price_difference FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.category ORDER BY avg_price_difference DESC LIMIT 1;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "What are the names and categories of products with a stock level below 50?",
        "output": "SELECT product_name, category\nFROM products\nWHERE current_stock < 50;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "List all products in the 'electronics' category that are priced over 500.",
        "output": "SELECT product_name, unit_price\nFROM products\nWHERE category = 'electronics' AND unit_price > 500;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);",
        "input": "What is the total revenue from sales transactions?",
        "output": "SELECT SUM(quantity * unit_price) AS total_revenue\nFROM transactions\nWHERE transaction_type = 'sale';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);",
        "input": "Find the total number of transactions for each type.",
        "output": "SELECT transaction_type, COUNT(*) AS transaction_count\nFROM transactions\nGROUP BY transaction_type;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "What is the average price of products in the 'furniture' category?",
        "output": "SELECT AVG(unit_price) AS average_price\nFROM products\nWHERE category = 'furniture';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);",
        "input": "What are the top 5 products sold by quantity?",
        "output": "SELECT product_id, SUM(quantity) AS total_quantity\nFROM transactions\nWHERE transaction_type = 'sale'\nGROUP BY product_id\nORDER BY total_quantity DESC\nLIMIT 5;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Retrieve the names of products that are out of stock.",
        "output": "SELECT product_name\nFROM products\nWHERE current_stock = 0;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);",
        "input": "What is the monthly revenue generated in the year 2024?",
        "output": "SELECT DATE_TRUNC('month', transaction_date) AS month, SUM(quantity * unit_price) AS monthly_revenue\nFROM transactions\nWHERE transaction_type = 'sale' AND EXTRACT(YEAR FROM transaction_date) = 2024\nGROUP BY month\nORDER BY month;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Find the category with the highest average product price.",
        "output": "SELECT category, AVG(unit_price) AS avg_price\nFROM products\nGROUP BY category\nORDER BY avg_price DESC\nLIMIT 1;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);",
        "input": "What is the total revenue generated by each product category?",
        "output": "SELECT p.category, SUM(t.quantity * t.unit_price) AS total_revenue\nFROM transactions t\nJOIN products p ON t.product_id = p.product_id\nWHERE t.transaction_type = 'sale'\nGROUP BY p.category\nORDER BY total_revenue DESC;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);",
        "input": "What are the top 3 months with the highest number of transactions?",
        "output": "SELECT DATE_TRUNC('month', transaction_date) AS month, COUNT(*) AS transaction_count\nFROM transactions\nGROUP BY month\nORDER BY transaction_count DESC\nLIMIT 3;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the names of products that have a current stock level lower than any product in the 'Electronics' category.",
        "output": "SELECT product_name FROM products WHERE current_stock < (SELECT MIN(current_stock) FROM products WHERE category = 'Electronics');"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the month-over-month growth rate in total revenue from sales for each month of 2023.",
        "output": "SELECT strftime('%Y-%m', transaction_date) AS sales_month, SUM(quantity * unit_price) AS total_revenue, LAG(SUM(quantity * unit_price), 1, 0) OVER (ORDER BY strftime('%Y-%m', transaction_date)) AS previous_month_revenue, (SUM(quantity * unit_price) - LAG(SUM(quantity * unit_price), 1, SUM(quantity * unit_price)) OVER (ORDER BY strftime('%Y-%m', transaction_date))) * 100.0 / LAG(SUM(quantity * unit_price), 1, SUM(quantity * unit_price)) OVER (ORDER BY strftime('%Y-%m', transaction_date)) AS mom_growth_rate FROM transactions WHERE transaction_type = 'sale' AND strftime('%Y', transaction_date) = '2023' GROUP BY sales_month ORDER BY sales_month;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Determine the percentage of total revenue generated by the top 5 products (in terms of total revenue) from sales transactions.",
        "output": "SELECT SUM(total_revenue) * 100.0 / (SELECT SUM(quantity * unit_price) FROM transactions WHERE transaction_type = 'sale') AS top5_revenue_percentage FROM (SELECT p.product_name, SUM(t.quantity * t.unit_price) AS total_revenue FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.product_name ORDER BY total_revenue DESC LIMIT 5) AS top5_products;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "For each category, find the product with the lowest average quantity sold in 'sale' transactions.",
        "output": "SELECT category, product_name, avg_quantity_sold FROM (SELECT p.category, p.product_name, AVG(t.quantity) as avg_quantity_sold, RANK() OVER (PARTITION BY p.category ORDER BY AVG(t.quantity) ASC) as rank_num FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.category, p.product_name) ranked_products WHERE rank_num = 1;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Identify products that have a higher average unit price than the average unit price of all products within their respective category, but have never been involved in a 'return' transaction.",
        "output": "SELECT p.product_name FROM products p WHERE p.unit_price > (SELECT AVG(unit_price) FROM products p2 WHERE p2.category = p.category) AND p.product_id NOT IN (SELECT DISTINCT product_id FROM transactions WHERE transaction_type = 'return');"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the total revenue generated from sales in each week of 2023 (Monday to Sunday), considering the week starts on Monday.",
        "output": "SELECT strftime('%Y-%W', transaction_date, 'weekday 0', '-6 days') AS sales_week, SUM(quantity * unit_price) AS total_revenue FROM transactions WHERE transaction_type = 'sale' AND strftime('%Y', transaction_date) = '2023' GROUP BY sales_week ORDER BY sales_week;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Determine the average difference in days between a 'sale' transaction and the subsequent 'return' transaction for the same product.",
        "output": "SELECT AVG(JULIANDAY(t2.transaction_date) - JULIANDAY(t1.transaction_date)) AS avg_days_between_sale_and_return FROM transactions t1 JOIN transactions t2 ON t1.product_id = t2.product_id AND t1.transaction_type = 'sale' AND t2.transaction_type = 'return' AND t2.transaction_date > t1.transaction_date;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the names of products that have been sold in every month of 2023.",
        "output": "SELECT p.product_name FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' AND strftime('%Y', t.transaction_date) = '2023' GROUP BY p.product_name HAVING COUNT(DISTINCT strftime('%Y-%m', t.transaction_date)) = 12;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Identify products that have a higher average sold quantity in 'sale' transactions on weekends (Saturday and Sunday) compared to weekdays.",
        "output": "SELECT p.product_name FROM products p JOIN (SELECT product_id, AVG(CASE WHEN strftime('%w', transaction_date) IN ('0', '6') THEN quantity ELSE 0 END) AS avg_weekend_quantity, AVG(CASE WHEN strftime('%w', transaction_date) BETWEEN '1' AND '5' THEN quantity ELSE 0 END) AS avg_weekday_quantity FROM transactions WHERE transaction_type = 'sale' GROUP BY product_id) AS quantity_stats ON p.product_id = quantity_stats.product_id WHERE quantity_stats.avg_weekend_quantity > quantity_stats.avg_weekday_quantity;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the total revenue generated from sales in the first half of each year (January to June) and the second half (July to December) for the years present in the transaction data.",
        "output": "SELECT strftime('%Y', transaction_date) AS sales_year, CASE WHEN strftime('%m', transaction_date) BETWEEN '01' AND '06' THEN 'First Half' WHEN strftime('%m', transaction_date) BETWEEN '07' AND '12' THEN 'Second Half' END AS half_year, SUM(quantity * unit_price) AS total_revenue FROM transactions WHERE transaction_type = 'sale' GROUP BY sales_year, half_year ORDER BY sales_year, half_year;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the average number of days between sales transactions for each month of 2023.",
        "output": "SELECT sales_month, AVG(days_between) AS average_days_between_sales FROM (SELECT strftime('%Y-%m', transaction_date) AS sales_month, JULIANDAY(transaction_date) - LAG(JULIANDAY(transaction_date), 1, JULIANDAY(transaction_date)) OVER (PARTITION BY strftime('%Y-%m', transaction_date) ORDER BY transaction_date) AS days_between FROM transactions WHERE transaction_type = 'sale' AND strftime('%Y', transaction_date) = '2023') AS date_diffs GROUP BY sales_month;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "List the products that have a higher average sold quantity in 'sale' transactions than the overall average sold quantity across all 'sale' transactions.",
        "output": "SELECT p.product_name FROM products p JOIN (SELECT product_id, AVG(quantity) AS avg_quantity_sold FROM transactions WHERE transaction_type = 'sale' GROUP BY product_id) AS product_avg ON p.product_id = product_avg.product_id WHERE product_avg.avg_quantity_sold > (SELECT AVG(quantity) FROM transactions WHERE transaction_type = 'sale');"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the total revenue generated from sales transactions for each day of the week, averaged over the entire period in the data.",
        "output": "SELECT day_of_week, AVG(total_revenue) AS average_daily_revenue FROM (SELECT strftime('%w', transaction_date) AS day_of_week, DATE(transaction_date) AS transaction_day, SUM(quantity * unit_price) AS total_revenue FROM transactions WHERE transaction_type = 'sale' GROUP BY transaction_day) AS daily_sales GROUP BY day_of_week ORDER BY day_of_week;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Determine the percentage contribution of each category to the total revenue generated from sales in each month of 2023.",
        "output": "SELECT strftime('%Y-%m', t.transaction_date) AS sales_month, p.category, SUM(t.quantity * t.unit_price) * 100.0 / SUM(SUM(t.quantity * t.unit_price)) OVER (PARTITION BY strftime('%Y-%m', t.transaction_date)) AS category_revenue_percentage FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' AND strftime('%Y', t.transaction_date) = '2023' GROUP BY sales_month, p.category ORDER BY sales_month, p.category;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the names of products that have been involved in 'sale' transactions in all quarters of 2023 (Q1, Q2, Q3, Q4).",
        "output": "SELECT p.product_name FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' AND strftime('%Y', t.transaction_date) = '2023' GROUP BY p.product_name HAVING COUNT(DISTINCT CASE WHEN strftime('%m', t.transaction_date) BETWEEN '01' AND '03' THEN 'Q1' WHEN strftime('%m', t.transaction_date) BETWEEN '04' AND '06' THEN 'Q2' WHEN strftime('%m', t.transaction_date) BETWEEN '07' AND '09' THEN 'Q3' WHEN strftime('%m', t.transaction_date) BETWEEN '10' AND '12' THEN 'Q4' END) = 4;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the running total of revenue generated from sales transactions, ordered by transaction date, for each product.",
        "output": "SELECT p.product_name, t.transaction_date, SUM(t.quantity * t.unit_price) OVER (PARTITION BY p.product_name ORDER BY t.transaction_date) AS running_total_revenue FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' ORDER BY p.product_name, t.transaction_date;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Identify the month in 2023 with the highest average daily revenue from sales transactions.",
        "output": "SELECT sales_month FROM (SELECT strftime('%Y-%m', transaction_date) AS sales_month, AVG(daily_revenue) AS avg_daily_revenue FROM (SELECT DATE(transaction_date) AS transaction_day, SUM(quantity * unit_price) AS daily_revenue FROM transactions WHERE transaction_type = 'sale' AND strftime('%Y', transaction_date) = '2023' GROUP BY transaction_day) AS daily_sales GROUP BY sales_month) ORDER BY avg_daily_revenue DESC LIMIT 1;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the names of products that have a lower average transaction unit price in 'sale' transactions than the overall average transaction unit price across all 'sale' transactions.",
        "output": "SELECT p.product_name FROM products p JOIN (SELECT product_id, AVG(unit_price) AS avg_transaction_price FROM transactions WHERE transaction_type = 'sale' GROUP BY product_id) AS product_avg_prices ON p.product_id = product_avg_prices.product_id WHERE product_avg_prices.avg_transaction_price < (SELECT AVG(unit_price) FROM transactions WHERE transaction_type = 'sale');"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Determine the top 3 categories with the highest average difference between the product unit price and the average transaction unit price for 'return' transactions.",
        "output": "SELECT p.category, AVG(p.unit_price - t.unit_price) AS avg_price_difference FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'return' GROUP BY p.category ORDER BY avg_price_difference DESC LIMIT 3;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the total revenue generated from sales transactions for each day, considering only the first sale transaction of each product on that day.",
        "output": "SELECT DATE(t.transaction_date) AS transaction_day, SUM(t.quantity * t.unit_price) AS total_revenue FROM transactions t WHERE t.transaction_type = 'sale' AND t.transaction_id IN (SELECT MIN(transaction_id) FROM transactions t2 WHERE t2.transaction_type = 'sale' AND DATE(t.transaction_date) = DATE(t2.transaction_date) GROUP BY t2.product_id) GROUP BY transaction_day;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "What are the names of products with a unit price greater than 50 and current stock less than 200?",
        "output": "SELECT product_name FROM products WHERE unit_price > 50 AND current_stock < 200;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);",
        "input": "List the product names and categories where the unit price is less than 25, ordered by category.",
        "output": "SELECT product_name, category FROM products WHERE unit_price < 25 ORDER BY category;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Find the average current stock of all products.",
        "output": "SELECT AVG(current_stock) FROM products;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL\n);",
        "input": "How many transactions occurred on '2023-10-26'?",
        "output": "SELECT COUNT(*) FROM transactions WHERE transaction_date = '2023-10-26';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What is the total quantity of products sold for each product category?",
        "output": "SELECT p.category, SUM(t.quantity) FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.category;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the average transaction price for each product, considering only 'sale' transactions.",
        "output": "SELECT p.product_name, AVG(t.unit_price) FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.product_name;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL\n);",
        "input": "What is the total quantity of products transacted each day?",
        "output": "SELECT transaction_date, SUM(quantity) FROM transactions GROUP BY transaction_date;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "List the product names that have a current stock greater than the average current stock of all products.",
        "output": "SELECT product_name FROM products WHERE current_stock > (SELECT AVG(current_stock) FROM products);"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL\n);",
        "input": "What is the total quantity transacted for each month?",
        "output": "SELECT strftime('%Y-%m', transaction_date) as month, SUM(quantity) FROM transactions GROUP BY month;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the top 5 products with the highest total sales quantity.",
        "output": "SELECT p.product_name, SUM(t.quantity) as total_quantity FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.product_name ORDER BY total_quantity DESC LIMIT 5;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What is the total revenue generated by each product category from sales transactions?",
        "output": "SELECT p.category, SUM(t.quantity * t.unit_price) AS total_revenue FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.category;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "List the product categories and the number of distinct products within each category that had transactions in the last 7 days.",
        "output": "SELECT p.category, COUNT(DISTINCT p.product_id) FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_date >= date('now', '-7 days') GROUP BY p.category;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "For each product, calculate the running total of quantity transacted over time, ordered by transaction date.",
        "output": "SELECT p.product_name, t.transaction_date, t.quantity, SUM(t.quantity) OVER (PARTITION BY p.product_id ORDER BY t.transaction_date) as running_total FROM products p JOIN transactions t ON p.product_id = t.product_id ORDER BY p.product_name, t.transaction_date;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Identify products that have never been sold (no 'sale' transactions).",
        "output": "SELECT p.product_name FROM products p LEFT JOIN transactions t ON p.product_id = t.product_id AND t.transaction_type = 'sale' WHERE t.transaction_id IS NULL;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the average daily sales quantity for each product category over the last 30 days.",
        "output": "SELECT p.category, AVG(t.quantity) FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' AND t.transaction_date >= date('now', '-30 days') GROUP BY p.category;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Find the products with the top 3 highest unit prices.",
        "output": "SELECT product_name, unit_price FROM products ORDER BY unit_price DESC LIMIT 3;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL\n);",
        "input": "What is the date of the earliest transaction?",
        "output": "SELECT MIN(transaction_date) FROM transactions;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "For each product category, find the product with the most number of 'sale' transactions.",
        "output": "WITH CategoryProductTransactionCounts AS (\n    SELECT\n        p.category,\n        p.product_name,\n        COUNT(t.transaction_id) AS transaction_count,\n        RANK() OVER (PARTITION BY p.category ORDER BY COUNT(t.transaction_id) DESC) as rank\n    FROM products p\n    JOIN transactions t ON p.product_id = t.product_id\n    WHERE t.transaction_type = 'sale'\n    GROUP BY p.category, p.product_name\n)\nSELECT\n    category,\n    product_name,\n    transaction_count\nFROM CategoryProductTransactionCounts\nWHERE rank = 1;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "List the products that have a current stock less than 50 and a unit price greater than 100.",
        "output": "SELECT product_name FROM products WHERE current_stock < 50 AND unit_price > 100;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the total quantity sold for each product, considering only 'sale' transactions, and order the results by quantity sold in descending order.",
        "output": "SELECT p.product_name, SUM(t.quantity) as total_sold FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.product_name ORDER BY total_sold DESC;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL\n);",
        "input": "What is the total quantity of products involved in 'return' transactions?",
        "output": "SELECT SUM(quantity) FROM transactions WHERE transaction_type = 'return';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Find the names of products that have a current stock greater than 500.",
        "output": "SELECT product_name FROM products WHERE current_stock > 500;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "What is the average unit price of all products?",
        "output": "SELECT AVG(unit_price) FROM products;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "How many transactions occurred on '2023-10-26'?",
        "output": "SELECT COUNT(*) FROM transactions WHERE transaction_date = '2023-10-26';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the total quantity of products sold for each product.",
        "output": "SELECT p.product_name, SUM(t.quantity) AS total_quantity_sold FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.product_name;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What are the names of products that have never been sold?",
        "output": "SELECT product_name FROM products WHERE product_id NOT IN (SELECT product_id FROM transactions WHERE transaction_type = 'sale');"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "List the products in the 'Electronics' category, sorted by price in descending order.",
        "output": "SELECT product_name, unit_price FROM products WHERE category = 'Electronics' ORDER BY unit_price DESC;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the total revenue generated from sales in the month of October 2023.",
        "output": "SELECT SUM(quantity * unit_price) AS total_revenue FROM transactions WHERE transaction_type = 'sale' AND transaction_date BETWEEN '2023-10-01' AND '2023-10-31';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What is the average transaction value (quantity * unit_price) for sales?",
        "output": "SELECT AVG(quantity * unit_price) AS average_transaction_value FROM transactions WHERE transaction_type = 'sale';"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Find the top 5 most expensive products.",
        "output": "SELECT product_name, unit_price FROM products ORDER BY unit_price DESC LIMIT 5;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Which product had the highest total sales value in the last quarter of 2023?",
        "output": "SELECT p.product_name, SUM(t.quantity * t.unit_price) AS total_sales_value FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' AND t.transaction_date BETWEEN '2023-10-01' AND '2023-12-31' GROUP BY p.product_name ORDER BY total_sales_value DESC LIMIT 1;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Show the daily sales trend for the month of November 2023.",
        "output": "SELECT transaction_date, SUM(quantity * unit_price) AS daily_sales FROM transactions WHERE transaction_type = 'sale' AND transaction_date BETWEEN '2023-11-01' AND '2023-11-30' GROUP BY transaction_date ORDER BY transaction_date;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "What are the categories with average product prices higher than the overall average product price?",
        "output": "SELECT category FROM products GROUP BY category HAVING AVG(unit_price) > (SELECT AVG(unit_price) FROM products);"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the number of unique products sold each day.",
        "output": "SELECT transaction_date, COUNT(DISTINCT product_id) AS unique_products_sold FROM transactions WHERE transaction_type = 'sale' GROUP BY transaction_date;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What is the moving average of daily sales for the past 7 days?",
        "output": "WITH DailySales AS (SELECT transaction_date, SUM(quantity*unit_price) as daily_sales FROM transactions WHERE transaction_type='sale' GROUP BY transaction_date) SELECT transaction_date, AVG(daily_sales) OVER (ORDER BY transaction_date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as moving_average FROM DailySales ORDER BY transaction_date;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "For each product, find the difference between its current stock and its average stock level over the past month.",
        "output": "WITH MonthlyAvgStock AS (SELECT product_id, AVG(quantity) as avg_stock FROM transactions WHERE transaction_date >= DATE('now', '-1 month') AND transaction_type = 'purchase' GROUP BY product_id) SELECT p.product_name, p.current_stock - COALESCE(mas.avg_stock, 0) as stock_difference FROM products p LEFT JOIN MonthlyAvgStock mas ON p.product_id = mas.product_id;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Calculate the cumulative sales total for each day.",
        "output": "WITH DailySales AS (SELECT transaction_date, SUM(quantity * unit_price) AS daily_total FROM transactions WHERE transaction_type = 'sale' GROUP BY transaction_date) SELECT transaction_date, SUM(daily_total) OVER (ORDER BY transaction_date) AS cumulative_sales FROM DailySales;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Rank products within each category based on their total sales quantity.",
        "output": "WITH ProductSales AS (SELECT p.product_id, p.product_name, p.category, SUM(t.quantity) AS total_quantity_sold FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.product_id, p.product_name, p.category) SELECT product_name, category, total_quantity_sold, RANK() OVER (PARTITION BY category ORDER BY total_quantity_sold DESC) AS rank_within_category FROM ProductSales;"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "What are the names of products with a unit price greater than 50?",
        "output": "SELECT product_name FROM products WHERE unit_price > 50"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "List all products in the 'Electronics' category.",
        "output": "SELECT * FROM products WHERE category = 'Electronics'"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Find the average unit price of all products.",
        "output": "SELECT AVG(unit_price) FROM products"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "How many transactions occurred in the month of March 2023?",
        "output": "SELECT COUNT(*) FROM transactions WHERE transaction_date BETWEEN '2023-03-01' AND '2023-03-31'"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What is the total revenue generated from sales in January 2023?",
        "output": "SELECT SUM(quantity * unit_price) FROM transactions WHERE transaction_type = 'sale' AND transaction_date BETWEEN '2023-01-01' AND '2023-01-31'"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What is the total quantity of products sold for each product, sorted by quantity in descending order?",
        "output": "SELECT p.product_name, SUM(t.quantity) AS total_sold FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.product_name ORDER BY total_sold DESC"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Which product has the highest current stock level?",
        "output": "SELECT product_name FROM products ORDER BY current_stock DESC LIMIT 1"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "List all products with current stock less than 50, sorted by current stock in ascending order.",
        "output": "SELECT * FROM products WHERE current_stock < 50 ORDER BY current_stock ASC"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What is the average transaction value for each product?",
        "output": "SELECT p.product_name, AVG(t.quantity * t.unit_price) AS avg_transaction_value FROM products p JOIN transactions t ON p.product_id = t.product_id GROUP BY p.product_name"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "Find the top 5 products with the highest total sales revenue.",
        "output": "SELECT p.product_name, SUM(t.quantity * t.unit_price) AS total_revenue FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' GROUP BY p.product_name ORDER BY total_revenue DESC LIMIT 5"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What is the total sales revenue for each category in the year 2023?",
        "output": "SELECT p.category, SUM(t.quantity * t.unit_price) AS total_revenue FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' AND t.transaction_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY p.category"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What is the date of the last recorded transaction for each product?",
        "output": "SELECT p.product_name, MAX(t.transaction_date) AS last_transaction_date FROM products p JOIN transactions t ON p.product_id = t.product_id GROUP BY p.product_name"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "What are the names and categories of products with a unit price between 20 and 50, ordered by category and then by unit price?",
        "output": "SELECT product_name, category FROM products WHERE unit_price BETWEEN 20 AND 50 ORDER BY category, unit_price"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "For each product, what is the difference between the current stock and the average stock sold per transaction?",
        "output": "SELECT p.product_name, p.current_stock - (SELECT AVG(quantity) FROM transactions WHERE product_id = p.product_id AND transaction_type = 'sale') AS stock_difference FROM products p"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "What is the total number of products in each category?",
        "output": "SELECT category, COUNT(*) AS total_products FROM products GROUP BY category"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "Which products have a unit price higher than the average unit price of all products?",
        "output": "SELECT product_name FROM products WHERE unit_price > (SELECT AVG(unit_price) FROM products)"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INTEGER PRIMARY KEY,\n    product_id INTEGER,\n    transaction_type TEXT NOT NULL,\n    quantity INTEGER NOT NULL,\n    transaction_date DATE NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);",
        "input": "What is the total revenue generated from each category of products on 2023-03-15?",
        "output": "SELECT p.category, SUM(t.quantity * t.unit_price) AS total_revenue FROM products p JOIN transactions t ON p.product_id = t.product_id WHERE t.transaction_type = 'sale' AND t.transaction_date = '2023-03-15' GROUP BY p.category"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "What are the product names of the 5 most expensive products?",
        "output": "SELECT product_name FROM products ORDER BY unit_price DESC LIMIT 5"
    },
    {
        "instruction": "You are a powerful text-to-SQL model. Your task is to generate SQL SELECT queries based on the following schema for an inventory management system:\n\nCREATE TABLE products (\n    product_id INTEGER PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    category TEXT NOT NULL,\n    unit_price DECIMAL(10,2) NOT NULL,\n    current_stock INTEGER NOT NULL\n);",
        "input": "List the products with the lowest unit price in each category.",
        "output": "SELECT product_name, category, unit_price FROM products p1 WHERE unit_price = (SELECT MIN(unit_price) FROM products p2 WHERE p2.category = p1.category)"
    }
]